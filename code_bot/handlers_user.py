from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, ChatMemberUpdated, CallbackQuery

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from channels_db.users_dao import add_user, select_user
from channels_db.subscribers_dao import save_chan_subs, delete_chan_subs, select_channel_subs
from code_bot.keyboards.with_channels import kbd_with_channels, btn_gift


private_router = Router()


CHAT_ID = [] # –°–ø–∏—Å–æ–∫ –∏–∑ id –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
ADMIN_ID = 1 # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞


class MailingStatesGroup(StatesGroup):
    mailing_txt = State()


@private_router.chat_member()
async def chat_member_handler(update: ChatMemberUpdated):

    if update.chat.id in CHAT_ID:

        if update.new_chat_member.status == 'creator' or update.new_chat_member.status == 'member':
            await save_chan_subs(update.chat.id, update.from_user.id, update.from_user.username)

        elif update.new_chat_member.status == 'left':
            await delete_chan_subs(update.chat.id, update.from_user.id)


@private_router.message(Command('start'))
async def cmd_get(message: Message):
    await message.answer('–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –¥–≤–∞ –∫–∞–Ω–∞–ª–∞ –∏ –∂–º–∏—Ç–µ <b>–ì–û–¢–û–í–û</b>',
                         reply_markup=await kbd_with_channels(), parse_mode='HTML')
    await add_user(message.from_user.full_name, message.from_user.id, message.from_user.username) # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥


@private_router.callback_query(F.data == 'done')
async def handler_btn_done(callback: CallbackQuery):
    subscribers_lis = []
    for one_channel_id in CHAT_ID:
        subscribers_lis.append(await select_channel_subs(one_channel_id, callback.from_user.id))
    if subscribers_lis.count(callback.from_user.id) == 2: # 2 - —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:
        # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–π –±–æ–Ω—É—Å
        await callback.message.edit_text('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—ã–π –¥–æ—Å—Ç—É–ø –∫ –≤–µ–±–∏–Ω–∞—Ä—É', reply_markup=await btn_gift())
    else:
        await callback.message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –¥–≤–∞ –∫–∞–Ω–∞–ª–∞ ‚òùÔ∏è')


# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
@private_router.message(StateFilter(None), Command('send'))
async def cmd_sendall(message: Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        await state.set_state(MailingStatesGroup.mailing_txt)
        await message.answer('–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')


@private_router.message(F.text, MailingStatesGroup.mailing_txt)
async def send_mailing_text(message: Message, state: FSMContext):
    for user_id in await select_user():
        await message.bot.send_message(user_id, message.text)
    await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')
    await state.clear()

